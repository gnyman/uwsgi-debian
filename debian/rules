#!/usr/bin/make -f

include /usr/share/cdbs/1/rules/upstream-tarball.mk
include /usr/share/cdbs/1/class/python-module.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/javahelper/java-vars.mk

# resolve supported architectures for arch-varying build-dependencies
# (in maintainer mode only: uses network and messes with control file)
ifneq (,$(DEB_MAINTAINER_MODE))
GREENLET_ARCHS := $(shell sh debian/pkgarchs.sh python-greenlet-dev)
OPENJDK7_ARCHS := $(shell sh debian/pkgarchs.sh openjdk-7-jdk)
V8_ARCHS := $(shell sh debian/pkgarchs.sh libv8-dev)
debian/control::
	sed -i \
		-e 's/@greenlet_archs@/$(GREENLET_ARCHS)/g' \
		-e 's/@openjdk7_archs@/$(OPENJDK7_ARCHS)/g' \
		-e 's/@v8_archs@/$(V8_ARCHS)/g' \
		debian/control
endif

DEB_UPSTREAM_URL = http://projects.unbit.it/downloads

# exclude binary file without source
DEB_UPSTREAM_REPACKAGE_EXCLUDES += \
 ./contrib/uwsgi.class

export LDFLAGS := $(shell dpkg-buildflags --get LDFLAGS)
export CFLAGS := $(shell dpkg-buildflags --get CFLAGS)
export CPPFLAGS := $(shell dpkg-buildflags --get CPPFLAGS)
CFLAGS += $(CPPFLAGS)

# Common variables
# ================

UWSGI_BUILDER = $(CURDIR)/uwsgiconfig.py -v

APACHE2_API := $(shell perl -ne 'print $$1 if m/our\s+\$$API\s+=\s+"(.*)"/' < $(shell which dh_apache2))
APACHE2_BUILDER := apxs2 -c $(shell apr-config --link-ld) $(shell apu-config --link-ld)

PHP_API := $(shell php-config --phpapi)
# TODO: Drop this (and its use) when php5-embed ABI is stable in oldstable
PHP_VERSION := $(shell dpkg-query -W -f '$${Version}' php5-dev)
# TODO: Drop this (and its use) when php5 5.5.0+dfsg-13 is in oldstable
PHP_SONAME_ALWAYS_CHANGE := $(shell dpkg --compare-versions '$(PHP_VERSION)' '>=' 5.5.0+dfsg-13~ || echo true)

DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)

# Dotless versions of Python runtimes (like 'XY').
PYTHON_VERS=$(subst .,,$(cdbs_python_supported_versions))
PYTHON_DEFAULT=$(subst .,,$(cdbs_python_current_version))
PYTHON3_VERS=$(subst .,,$(cdbs_python3_supported_versions))
PYTHON3_DEFAULT=$(subst .,,$(cdbs_python3_current_version))

# Python install path for dh_install, as expected by dh_pythonX helpers
# * major and minor included for python 2.x, else only major
# * leading slash emitted
python_installdir = usr/lib/$(or $(cdbs_curpythonstem:%=python%),$(cdbs_curpythonpribinary))/dist-packages

# Transform plugin's package name to plugin's name:
# * delete dots
# * replace '-' with '_'
# * replace 'openjdk_7' with 'openjdk7'
pkg_name_to_plugin_name = $(strip \
	$(subst openjdk_7,openjdk7,$(subst -,_,$(subst .,,$(1))) \
))

# List of plugins' packages names (without common prefix 'uwsgi-plugin-')
UWSGI_PLUGIN_PKGS_NAMES = $(patsubst uwsgi-plugin-%,%,$(filter uwsgi-plugin-%,$(DEB_PACKAGES)))

UWSGI_PLUGINS_SRC_DIR = plugins

UWSGI_PLUGIN_INFILES := $(wildcard debian/*__PLUGIN__*.in)
UWSGI_PLUGINLANGS = python java lua ruby

UWSGI_KINDS_python = python python3
UWSGI_PLUGINS_python = $(UWSGI_KINDS_python)
UWSGI_SRCPLUGINS_python = greenlet

UWSGI_KINDS_java = openjdk-7
UWSGI_DEFAULTKIND_java = openjdk-7
UWSGI_SRCPLUGINS_java = jvm jwsgi

UWSGI_KINDS_lua = lua5.1 lua5.2
UWSGI_DEFAULTKIND_lua = lua5.1

UWSGI_KINDS_ruby = ruby1.9.1
UWSGI_DEFAULTKIND_ruby = ruby1.9.1
UWSGI_SRCPLUGINS_ruby = rack

PARTICULARLY_BUILT_UWSGI_PLUGIN_PKGS = \
	$(UWSGI_PLUGINS_python) \
	greenlet-python \
	rbthreads fiber

ORDINARILY_BUILT_UWSGI_PLUGIN_PKGS := $(filter-out \
	$(PARTICULARLY_BUILT_UWSGI_PLUGIN_PKGS), $(UWSGI_PLUGIN_PKGS_NAMES))

UWSGI_MODULE_INFILES := $(wildcard debian/*__MODULE__*.in)

UWSGI_MODULES_apache = uwsgi ruwsgi proxy-uwsgi

# types of packaging scripts to use (tried from left to right)
# * pri: binary and library
# * sec: only binary
# * aux: only library
# * openjdk: non-java code linked against OpenJDK
UWSGI_PKGSCRIPTS_DEFAULT = sec
UWSGI_PKGSCRIPTS_jvm = openjdk pri
UWSGI_PKGSCRIPTS_jwsgi = openjdk aux
UWSGI_PKGSCRIPTS_lua = pri
UWSGI_PKGSCRIPTS_rack = pri

# Discards directory-part of target and returns substring after last '-'
# character
target_name_tail = $(lastword $(subst -, ,$(notdir $(1))))

# From something like:
#   $(call <...>, uwsgi-, $(UWSGI_KINDS_python), .dirs)
# makes list:
#   $(CURDIR)/debian/uwsgi-python.dirs $(CURDIR)/debian/uwsgi-python3.dirs
files_instantiated_in_debian_dir = $(addprefix \
	$(CURDIR)/debian/$(strip $(1)), $(addsuffix $(strip $(3)), $(strip $(2))) \
)

# Stem-based variables
# ====================

pkg_name = $(cdbs_curpkg)

plugin_name = $(call pkg_name_to_plugin_name,$*)
# TODO: avoid exception for rbthreads or fiber
# FIXME: exception for rbthreads or fiber breaks resolving plugin_interpreter
plugin_is_lang = $(strip $(or \
	$(filter rbthreads fiber,$*),\
	$(foreach lang,$(UWSGI_PLUGINLANGS),\
		$(if $(filter $(UWSGI_KINDS_$(lang)),$*),$(lang)))))
plugin_has_lang = $(strip $(foreach lang,$(UWSGI_PLUGINLANGS),\
	$(foreach srcplugin,$(UWSGI_SRCPLUGINS_$(lang)),\
		$(foreach kind,$(UWSGI_KINDS_$(lang)),\
			$(if $(filter $(srcplugin)-$(kind),$*),\
				$(lang))))))
plugin_lang = $(strip $(or \
	$(plugin_is_lang),\
	$(plugin_has_lang)))
plugin_stem = $(strip $(or \
	$(plugin_is_lang),\
	$(foreach kind,$(UWSGI_KINDS_$(plugin_has_lang)),\
		$(patsubst %-$(kind),%,$(filter %-$(kind),$*)))))
plugin_kind = $(strip $(or \
	$(if $(plugin_is_lang),\
		$*),\
	$(foreach kind,$(UWSGI_KINDS_$(plugin_has_lang)),\
		$(if $(filter %-$(kind),$*),\
			$(kind)))))
plugin_src = $(strip \
	$(call pkg_name_to_plugin_name,$(or \
		$(plugin_stem),\
		$*)))
plugin_lang_stem = $(strip \
	$(if $(filter java,$(plugin_lang)),\
		$(firstword $(subst -, ,$(plugin_kind)))))
plugin_lang_kind = $(strip \
	$(if $(filter java python,$(plugin_lang)),\
		$(lastword $(subst -, ,$(plugin_kind)))))
# TODO: avoid exception for rbthreads or fiber
plugin_interpreter = $(strip $(or \
	$(if $(filter rbthreads fiber,$*),\
		/usr/bin/$(UWSGI_DEFAULTKIND_ruby)),\
	$(if $(filter ruby,$(plugin_lang)),\
		/usr/bin/$(plugin_kind))))
plugin_alternatives_name = uwsgi-plugin-$(strip $(or \
	$(if $(filter python,$(plugin_is_lang)),\
		$(plugin_lang_kind)),\
	$(if $(filter python,$(plugin_has_lang)),\
		$(plugin_stem)-$(plugin_lang_kind)),\
	$(plugin_stem),\
	$(plugin_name)))
plugin_alternatives_stem = $(strip $(or \
	$(if $(filter python,$(plugin_is_lang)),\
		$(plugin_lang_kind)),\
	$(plugin_stem)))
plugin_alternatives_priority = $(strip \
	$(if $(filter $(plugin_kind),$(UWSGI_DEFAULTKIND_$(plugin_lang))),\
		75,\
		35))

# per-infile variables, relying on $(infile) and optional $(plugin_src)
plugin_pkgtypes = $(or $(UWSGI_PKGSCRIPTS_$(plugin_src)),$(UWSGI_PKGSCRIPTS_DEFAULT))
plugin_has_binary = $(filter pri sec,$(plugin_pkgtypes))
# plugin_infile picks first existing infile variant:
# 1. $(infile).$(UWSGI_PKGSCRIPTS_$(plugin_src))
# 2. $(infile).$(UWSGI_PKGSCRIPTS_DEFAULT)
# 3. $(infile)
plugin_infile = $(firstword $(wildcard \
	$(foreach suffix,$(plugin_pkgtypes),\
		$(addsuffix .$(suffix),$(infile))) \
	$(infile) \
	))

module_name = $(subst -,_,$(subst ruwsgi,Ruwsgi,$*))
module_apachename = $(subst -,_,$(subst ruwsgi,uwsgi,$*))

# CDBS-specific variables
# =======================

DEB_COMPRESS_EXCLUDE_uwsgi-core = .ini .lua .pl .png .psgi .py .ru .ws .xml \
                                  .yml
DEB_COMPRESS_EXCLUDE_uwsgi-extra = .class .java .rb .c

DEB_DH_STRIP_ARGS_uwsgi-core := --dbg-package=uwsgi-dbg
$(foreach PLUGIN_PKG_NAME, $(UWSGI_PLUGIN_PKGS_NAMES), $(eval \
	DEB_DH_STRIP_ARGS_uwsgi-plugin-$(PLUGIN_PKG_NAME) := --dbg-package=uwsgi-dbg\
))

DEB_INSTALL_DOCS_ALL += $(DEB_SRCDIR)/CONTRIBUTORS

DEB_DH_INSTALL_ARGS_uwsgi-plugin-psgi = coroae_plugin.so usr/lib/uwsgi/plugins
DEB_DH_INSTALL_ARGS_python-uwsgidecorators = uwsgidecorators.py $(python_installdir)
DEB_DH_INSTALL_ARGS_python3-uwsgidecorators = 2to3/uwsgidecorators.py $(python_installdir)

DEB_DH_SHLIBDEPS_ARGS_uwsgi-plugin-php = -l/usr/lib/php5 -- --ignore-missing-info

CDBS_DEPENDS_uwsgi-plugin-php = phpapi-$(PHP_API)
CDBS_DEPENDS_uwsgi-plugin-php +=, $(if $(PHP_SONAME_ALWAYS_CHANGE),\
	libphp5-embed (= $(PHP_VERSION)),\
	libphp5-embed (>= $(PHP_VERSION)~))

$(foreach module, $(UWSGI_MODULES_apache),\
	$(eval CDBS_DEPENDS_libapache2-mod-$(module) = $(APACHE2_API:%=apache2-api-%))\
	$(eval CDBS_RECOMMENDS_libapache2-mod-$(module) = uwsgi-core)\
	$(eval CDBS_SUGGESTS_libapache2-mod-$(module) = uwsgi)\
)

# Rules
# =====

clean::
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) --clean
	find -type f -name '*.pyc' -delete
	find -type d -name __pycache__ -delete
	find -type f \( -name '*.class' -or -name '*.jar' \) -delete
	rm -f *_plugin.so
	# instantiated uwsgi-plugin-X templates
	rm -f $(call files_instantiated_in_debian_dir, \
		uwsgi-plugin-, $(UWSGI_PLUGIN_PKGS_NAMES), \
		.install )
	for TEMPLATE_TYPE in links manpages postinst prerm lintian-overrides; do \
		for INSTANTIATED_TEMPLATE in $(call files_instantiated_in_debian_dir, \
			uwsgi-plugin-, \
			$(ORDINARILY_BUILT_UWSGI_PLUGIN_PKGS), \
			.$${TEMPLATE_TYPE} \
		); do \
			rm -f $${INSTANTIATED_TEMPLATE}; \
		done; \
	done
	rm -f debian/*.1
	rm -f debian/stamp-*
	rm -f uwsgibuild.*

# add per-package hook to expand packaging files before build
pre-build:: \
 $(patsubst %,debian/expand-files/%,$(DEB_ALL_PACKAGES))
$(patsubst %,debian/expand-files/%,$(DEB_ALL_PACKAGES)): \
 debian/expand-files/%: \
 | debian/expand-files update-config
debian/expand-files:
	mkdir debian/expand-files
clean::
	rm -rf debian/expand-files

# uwsgi-core package
# ------------------

build/uwsgi-core:: uwsgi-core

# TODO: resolve list more generically (to avoid e.g. ZeroMQ exception)
uwsgi-core: debian/buildconf/uwsgi-plugin.ini uwsgi-core-local
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--build $(CURDIR)/debian/buildconf/uwsgi-core.ini
	
	set -e; for PLUGIN_NAME in \
			alarm_speech \
			cache \
			carbon \
			cgi \
			cheaper_backlog2 \
			cheaper_busyness \
			clock_monotonic \
			clock_realtime \
			corerouter \
			coroae \
			echo \
			emperor_amqp \
			$(if $(filter-out hurd-%,$(DEB_HOST_ARCH)),emperor_zeromq) \
			fastrouter \
			http \
			logfile \
			logsocket \
			nagios \
			notfound \
			pam \
			ping \
			rawrouter \
			redislog \
			router_basicauth \
			router_cache \
			router_http \
			router_memcached \
			router_redirect \
			router_rewrite \
			router_static \
			router_uwsgi \
			rpc \
			rrdtool \
			rsyslog \
			signal \
			spooler \
			ssi \
			sslrouter \
			stats_pusher_statsd \
			symcall \
			syslog \
			transformation_gzip \
			transformation_tofile \
			transformation_toupper \
			ugreen \
			zergpool \
			; do \
		$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$${PLUGIN_NAME} \
				     $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
				     $${PLUGIN_NAME}; \
	done
clean::
	rm -f uwsgi-core
	find -type l -name 'uwsgi_*' -delete

DEB_INSTALL_DOCS_uwsgi-core += tests

# move installed examples into subdirs by type
ex_types = conffile psgi rack router wsapi wsgi
ex_conffile = mega.xml multi.* sites.xml uwsgi.xml vassals werkzeug_strict.yml werkzeug.*
ex_rack = config.ru config2.ru fibers.*
ex_router = router.lua uwsgirouter*
ex_psgi = mojoapp.pl
ex_wsapi = *.ws
ex_wsgi = mjpeg_stream.py multiapp.py simple_app.py simple_app_wsgi2.py taskqueue.py
ex_drop = bootstrap* config*.lua config??.ru corostream.pl debug.ini
ex_drop += flaskpost.py heavytest.* info_uwsgi.php logic.ini
ex_drop += protected.ini welcome.ini welcome3.py
binary-post-install/uwsgi-core::
	set -e; \
	cd debian/$(cdbs_curpkg)/usr/share/doc/$(cdbs_curpkg)/examples; \
	$(foreach type, $(ex_types),mkdir $(type); mv -t $(type) $(ex_$(type));) \
	rm $(ex_drop)

install/uwsgi-core::
	help2man \
		--name 'fast (pure C), self-healing, developer-friendly WSGI server' \
		--section 1 \
		--no-info \
		$(CURDIR)/uwsgi-core \
		> $(CURDIR)/debian/uwsgi-core.1

# uwsgi-plugin-% packages
# -----------------------

# setup hook and config for building plugins
$(patsubst %,build/uwsgi-plugin-%,$(UWSGI_PLUGIN_PKGS_NAMES)):: \
 build/uwsgi-plugin-%: \
 debian/buildconf/uwsgi-plugin.ini uwsgi-core-local debian/stamp-plugin-%

debian/buildconf/uwsgi-plugin.ini:
	sed -e 's|@@curdir@@|$(CURDIR)|g' \
		< $(CURDIR)/debian/buildconf/uwsgi-plugin.ini.in \
		> $(CURDIR)/debian/buildconf/uwsgi-plugin.ini
clean::
	rm -f debian/buildconf/uwsgi-plugin.ini

uwsgi-core-local:
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--build $(CURDIR)/debian/buildconf/uwsgi-plugin.ini
clean::
	rm -f uwsgi-core-local

#  * eval'ing JAVA_HOME needed to resolve JVM_SERVER_DIR
$(patsubst %,debian/stamp-plugin-%,$(ORDINARILY_BUILT_UWSGI_PLUGIN_PKGS)): \
 debian/stamp-plugin-%:
	$(if $(filter java,$(plugin_lang)),\
		$(eval JAVA_HOME = /usr/lib/jvm/java-$(plugin_lang_kind)-$(plugin_lang_stem)-$(JAVA_ARCH)))
	$(if $(filter java,$(plugin_lang)),UWSGICONFIG_JVM_INCPATH='$(JAVA_HOME)/include/') \
	$(if $(filter java,$(plugin_lang)),UWSGICONFIG_JVM_LIBPATH='$(JVM_SERVER_DIR)') \
	$(if $(filter lua,$(plugin_lang)),UWSGICONFIG_LUA_IMPLEMENTATION=$(plugin_kind)) \
	$(if $(filter ruby,$(plugin_lang)),UWSGICONFIG_RUBYPATH=$(plugin_interpreter)) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_src) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

$(patsubst %,debian/stamp-plugin-%,$(UWSGI_PLUGINS_python)): \
 debian/stamp-plugin-%:
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $(cdbs_python$(PYTHON_KIND:python%=%)_supported_versions))
	$(foreach python_version,$(PYVERS), \
		$(call cdbs_python_binary,python$(python_version)) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_src) \
			         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini\
			         python$(subst .,,$(python_version)); \
	)
	sed -e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-python.dirs.in \
			> $(CURDIR)/debian/uwsgi-plugin-$(PYTHON_KIND).dirs
	touch $@

debian/stamp-plugin-greenlet-python: \
 debian/stamp-plugin-%:
	$(foreach python_version,$(cdbs_python_supported_versions), \
		$(call cdbs_python_binary,python$(python_version)) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_src) \
			         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
			         $(plugin_stem)_python$(subst .,,$(python_version)); \
	)
	touch $@

debian/stamp-plugin-rbthreads: \
 debian/stamp-plugin-%:
	UWSGICONFIG_RUBYPATH=$(plugin_interpreter) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_src) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

debian/stamp-plugin-fiber: \
 debian/stamp-plugin-%:
	UWSGICONFIG_RUBYPATH=$(plugin_interpreter) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_src) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

# resolve packaging scripts and man pages
# ---------------------------------------

$(patsubst %,debian/expand-files/uwsgi-plugin-%,$(ORDINARILY_BUILT_UWSGI_PLUGIN_PKGS)): \
 debian/expand-files/uwsgi-plugin-%:
	set -e; \
	$(foreach infile,$(UWSGI_PLUGIN_INFILES),\
		$(if $(shell test -s "$(plugin_infile)" && echo "not empty"),\
			sed \
				-e 's/@@pkg_name@@/$(pkg_name)/g' \
				-e 's/@@plugin_name@@/$(plugin_name)/g' \
				-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
				-e 's/@@plugin_alternatives_name@@/$(plugin_alternatives_name)/g' \
				-e 's/@@plugin_alternatives_stem@@/$(plugin_alternatives_stem)/g' \
				-e 's/@@plugin_alternatives_priority@@/$(plugin_alternatives_priority)/g' \
				< $(plugin_infile) \
				> $(subst __PLUGIN__,$*,$(basename $(infile)));))
	touch $@

$(patsubst %,install/uwsgi-plugin-%,$(ORDINARILY_BUILT_UWSGI_PLUGIN_PKGS)):: \
 install/uwsgi-plugin-%:
	set -e; \
	$(if $(plugin_has_binary),\
		ln -sf uwsgi-core-local uwsgi_$(plugin_name);\
		help2man \
			--name 'fast (pure C)$(comma) self-healing$(comma) developer-friendly WSGI server' \
			--section 1 \
			--no-info \
			./uwsgi_$(plugin_name) \
			> debian/uwsgi_$(plugin_name).1)

$(patsubst %,install/uwsgi-plugin-%,$(UWSGI_PLUGINS_python)):: \
 install/uwsgi-plugin-%:
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYDEFAULT = $($(subst python,PYTHON,$(PYTHON_KIND))_DEFAULT))
	set -e; \
	$(foreach TEMPLATE_TYPE,postinst prerm,\
		sed \
			-e 's/@@pkg_name@@/$(pkg_name)/g' \
			-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
			-e 's/@@plugin_alternatives_name@@/$(plugin_alternatives_name)/g' \
			-e 's/@@plugin_alternatives_stem@@/$(plugin_alternatives_stem)/g' \
			-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
			-e 's/@@default_python_version_dotless@@/$(PYDEFAULT)/g' \
			-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
				< $(CURDIR)/debian/uwsgi-plugin-python.$(TEMPLATE_TYPE).in \
				> $(CURDIR)/debian/$(cdbs_curpkg).$(TEMPLATE_TYPE);)\
	$(foreach PYTHON_VERSION,$(PYVERS),\
		$(foreach TEMPLATE_TYPE,install links manpages,\
			sed \
				-e "s/@@plugin_name@@/python$(PYTHON_VERSION)/g" \
				< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.$(TEMPLATE_TYPE).in \
				>> $(CURDIR)/debian/$(cdbs_curpkg).$(TEMPLATE_TYPE);)\
		ln -sf \
			$(CURDIR)/uwsgi-core-local \
			$(CURDIR)/uwsgi_python$(PYTHON_VERSION); \
		help2man \
			--name 'fast (pure C), self-healing, developer-friendly WSGI server' \
			--section 1 \
			--no-info \
			$(CURDIR)/uwsgi_python$(PYTHON_VERSION) \
			> $(CURDIR)/debian/uwsgi_python$(PYTHON_VERSION).1;)
clean::
	rm -f $(foreach python,$(UWSGI_KINDS_python),\
		$(patsubst %,debian/uwsgi-plugin-$(python).%,\
			dirs links manpages postinst prerm))

install/uwsgi-plugin-greenlet-python:: \
 install/uwsgi-plugin-%:
	set -e; \
	$(foreach TEMPLATE_TYPE,postinst prerm,\
		sed \
			-e 's/@@pkg_name@@/$(pkg_name)/g' \
			-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
			-e 's/@@plugin_lang_kind@@/$(plugin_lang_kind)/g' \
			-e 's/@@plugin_alternatives_name@@/$(plugin_alternatives_name)/g' \
			-e 's/@@plugin_alternatives_stem@@/$(plugin_alternatives_stem)/g' \
			-e 's/@@available_python_versions_dotless@@/$(PYTHON_VERS)/g' \
			-e 's/@@default_python_version_dotless@@/$(PYTHON_DEFAULT)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-greenlet-python.$(TEMPLATE_TYPE).in \
			> $(CURDIR)/debian/$(cdbs_curpkg).$(TEMPLATE_TYPE);)\
	$(foreach PYTHON_VERSION,$(PYTHON_VERS),\
		sed \
			-e "s/@@plugin_name@@/greenlet_python$(PYTHON_VERSION)/g" \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			>> $(CURDIR)/debian/$(cdbs_curpkg).install;)
clean::
	rm -f $(patsubst %,debian/uwsgi-plugin-greenlet-python.%,\
		install postinst prerm)

install/uwsgi-plugin-rbthreads:: \
 install/uwsgi-plugin-%:
	sed \
		-e 's/@@plugin_name@@/$(plugin_name)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			> $(CURDIR)/debian/$(cdbs_curpkg).install

install/uwsgi-plugin-fiber:: \
 install/uwsgi-plugin-%:
	sed \
		-e 's/@@plugin_name@@/$(plugin_name)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			> $(CURDIR)/debian/$(cdbs_curpkg).install

# resolve Python rtupdate scripts
# -------------------------------

$(patsubst %,binary-post-install/uwsgi-plugin-%,$(UWSGI_PLUGINS_python)):: \
 binary-post-install/uwsgi-plugin-%:
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYTHON_RTUPDATE_SCRIPT = \
		$(CURDIR)/debian/$(cdbs_curpkg)/usr/share/$(PYTHON_KIND)/runtime.d/uwsgi-plugin-$(PYTHON_KIND).rtupdate \
	)
	sed \
		-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
		-e 's/@@plugin_alternatives_name@@/$(plugin_alternatives_name)/g' \
		-e 's/@@plugin_alternatives_stem@@/$(plugin_alternatives_stem)/g' \
		-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
		-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-python.rtupdate.in \
			> $(PYTHON_RTUPDATE_SCRIPT)
	chmod 755 $(PYTHON_RTUPDATE_SCRIPT)

binary-post-install/uwsgi-plugin-greenlet-python:: \
 binary-post-install/uwsgi-plugin-%:
	$(eval PYTHON_RTUPDATE_SCRIPT = \
		$(CURDIR)/debian/$(cdbs_curpkg)/usr/share/python/runtime.d/uwsgi-plugin-greenlet-python.rtupdate \
	)
	sed \
		-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
		-e 's/@@plugin_lang_kind@@/$(plugin_lang_kind)/g' \
		-e 's/@@plugin_alternatives_name@@/$(plugin_alternatives_name)/g' \
		-e 's/@@plugin_alternatives_stem@@/$(plugin_alternatives_stem)/g' \
		-e 's/@@available_python_versions_dotless@@/$(PYTHON_VERS)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-greenlet-python.rtupdate.in \
			> $(PYTHON_RTUPDATE_SCRIPT)
	chmod 755 $(PYTHON_RTUPDATE_SCRIPT)

# libapache2-mod-% packages
# -------------------------

$(patsubst %,build/libapache2-mod-%,$(UWSGI_MODULES_apache)):: \
 build/%: \
 debian/stamp-%
$(patsubst %,debian/stamp-libapache2-mod-%,$(UWSGI_MODULES_apache)): \
 debian/stamp-libapache2-mod-%:
	$(APACHE2_BUILDER) apache2/mod_$(module_name).c
	touch $@
clean::
	rm -rf apache2/.libs
	rm -f apache2/*.la apache2/*.lo apache2/*.slo

$(patsubst %,debian/expand-files/libapache2-mod-%,$(UWSGI_MODULES_apache)): \
 debian/expand-files/libapache2-mod-%:
	echo 'LoadModule $(module_apachename)_module /usr/lib/apache2/modules/mod_$(module_name).so' \
		> debian/$(module_name).load
	set -e; \
	$(foreach infile,$(UWSGI_MODULE_INFILES),sed \
		-e 's/@@pkg_name@@/$(pkg_name)/g' \
		-e 's/@@module_name@@/$(module_name)/g' \
		< $(infile) \
		> $(subst __MODULE__,$*,$(basename $(infile)));)
	touch $@
clean::
	rm -f $(foreach module,$(UWSGI_MODULES_apache),\
		$(subst __MODULE__,$(module),$(basename $(UWSGI_MODULE_INFILES))))
	rm -f debian/*.load

# Python module packages
# ----------------------

# convert Python 2.x module to Python 3
build/python3-uwsgidecorators:: \
 2to3/uwsgidecorators.py
2to3/uwsgidecorators.py:
	mkdir -p 2to3
	2to3 --output-dir=2to3 --write --nobackups --no-diffs \
		uwsgidecorators.py
clean::
	rm -rf 2to3
