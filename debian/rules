#!/usr/bin/make -f

include /usr/share/cdbs/1/rules/upstream-tarball.mk
include /usr/share/cdbs/1/rules/utils.mk
include /usr/share/cdbs/1/class/python-module.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/javahelper/java-vars.mk

# resolve supported architectures for arch-varying build-dependencies
# (in maintainer mode only: uses network and messes with control file)
ifneq (,$(DEB_MAINTAINER_MODE))
GREENLET_ARCHS := $(shell sh debian/pkgarchs.sh python-greenlet-dev)
OPENJDK6_ARCHS := $(shell sh debian/pkgarchs.sh openjdk-6-jdk)
OPENJDK7_ARCHS := $(shell sh debian/pkgarchs.sh openjdk-7-jdk)
V8_ARCHS := $(shell sh debian/pkgarchs.sh libv8-dev)
debian/control::
	sed -i \
		-e 's/@greenlet_archs@/$(GREENLET_ARCHS)/g' \
		-e 's/@openjdk6_archs@/$(OPENJDK6_ARCHS)/g' \
		-e 's/@openjdk7_archs@/$(OPENJDK7_ARCHS)/g' \
		-e 's/@v8_archs@/$(V8_ARCHS)/g' \
		debian/control
endif

DEB_UPSTREAM_URL = http://projects.unbit.it/downloads

export LDFLAGS=$(shell dpkg-buildflags --get LDFLAGS)
export CFLAGS=$(shell dpkg-buildflags --get CFLAGS)
export CFLAGS+=$(shell dpkg-buildflags --get CPPFLAGS)
export CPPFLAGS=$(shell dpkg-buildflags --get CPPFLAGS)

# Common variables
# ================

APXS2=/usr/bin/apxs2
APR_CONFIG=/usr/bin/apr-config
APU_CONFIG=/usr/bin/apu-config
UWSGI_BUILDER = $(CURDIR)/uwsgiconfig.py --verbose --debug
APACHE2_API = $(shell perl -ne 'print $$1 if m/our\s+\$$API\s+=\s+"(.*)"/' < $(shell which dh_apache2))
PHP_API = $(shell php-config --phpapi)
# TODO: Drop this (and its use) when php5-embed ABI is stable in oldstable
PHP_VERSION := $(shell dpkg-query -W -f '$${Version}' php5-dev)
# TODO: Drop this (and its use) when php5 5.5.0+dfsg-13 is in oldstable
PHP_SONAME_ALWAYS_CHANGE := $(shell dpkg --compare-versions '$(PHP_VERSION)' '>=' 5.5.0+dfsg-13~ || echo true)

DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)

# Dotless versions of Python runtimes (like 'XY').
PYTHON_VERS=$(subst .,,$(cdbs_python_supported_versions))
PYTHON_DEFAULT=$(subst .,,$(cdbs_python_current_version))
PYTHON3_VERS=$(subst .,,$(cdbs_python3_supported_versions))
PYTHON3_DEFAULT=$(subst .,,$(cdbs_python3_current_version))

# Python install path for dh_install, as expected by dh_pythonX helpers
# * major and minor included for python 2.x, else only major
# * leading slash emitted
python_installdir = usr/lib/$(or $(cdbs_curpythonstem:%=python%),$(cdbs_curpythonpribinary))/dist-packages

# Search in debian/control for packages with name $(1)% and extract % in list.
list_pkgname_suffixes = $(patsubst $(1)%,%,$(filter $(1)%,$(DEB_PACKAGES)))

# Transform plugin's package name to plugin's name:
# * delete dots
# * replace '-' with '_'
# * replace 'openjdk_6' with 'openjdk6'
# * replace 'openjdk_7' with 'openjdk7'
pkg_name_to_plugin_name = $(strip \
	$(subst openjdk_7,openjdk7,$(subst openjdk_6,openjdk6,$(subst -,_,$(subst .,,$(1)))) \
))

# List of plugins' packages names (without common prefix 'uwsgi-plugin-')
UWSGI_PLUGINS = $(call list_pkgname_suffixes,uwsgi-plugin-)

UWSGI_PLUGINS_SRC_DIR = plugins

# TODO: Package separately each actual kind (e.g. python2.7 and python3.3)
UWSGI_PYTHON_KINDS = python python3
# TODO: include greenlet and pyerl plugins
UWSGI_PLUGINS_PYTHON = $(UWSGI_PYTHON_KINDS)

UWSGI_JAVA_KINDS = openjdk-6 openjdk-7
UWSGI_JAVA_DEFAULT_KIND = openjdk-7
UWSGI_PLUGINS_JAVA = $(foreach stem,jvm jwsgi,$(patsubst %,$(stem)-%,$(UWSGI_JAVA_KINDS)))

UWSGI_LUA_KINDS = lua5.1 lua5.2
UWSGI_LUA_DEFAULT_KIND = lua5.1
UWSGI_PLUGINS_LUA = $(UWSGI_LUA_KINDS)

# TODO: include ruby2.0 and jruby kinds
UWSGI_RUBY_KINDS = ruby1.9.1
UWSGI_RUBY_DEFAULT_KIND = ruby1.9.1
# TODO: include fiber and rbthreads plugins
UWSGI_PLUGINS_RUBY = $(foreach stem,rack,$(patsubst %,$(stem)-%,$(UWSGI_RUBY_KINDS)))

UWSGI_PLUGINS_CUSTOM_BUILD = \
	$(UWSGI_PLUGINS_PYTHON) \
	greenlet-python \
	$(patsubst %,pyerl-%,$(UWSGI_PYTHON_KINDS)) \
	rbthreads fiber

UWSGI_PLUGINS_REGULAR_BUILD := $(filter-out \
	$(UWSGI_PLUGINS_CUSTOM_BUILD), $(UWSGI_PLUGINS))

UWSGI_APACHEMODULES = uwsgi ruwsgi proxy-uwsgi

# type of packaging scripts to use
# * pri: binary and library
# * sec: only binary
# * aux: only library
UWSGI_PKGSCRIPTS_DEFAULT = sec
UWSGI_PKGSCRIPTS_jvm = pri
UWSGI_PKGSCRIPTS_jwsgi = aux
UWSGI_PKGSCRIPTS_lua = pri
UWSGI_PKGSCRIPTS_rack = pri

# Discards directory-part of target and returns substring after last '-'
# character
target_name_tail = $(lastword $(subst -, ,$(notdir $(1))))

# From something like:
#   $(call <...>, uwsgi-, $(UWSGI_PYTHON_KINDS), .dirs)
# makes list:
#   $(CURDIR)/debian/uwsgi-python.dirs $(CURDIR)/debian/uwsgi-python3.dirs
files_instantiated_in_debian_dir = $(addprefix \
	$(CURDIR)/debian/$(strip $(1)), $(addsuffix $(strip $(3)), $(strip $(2))) \
)

# per-package variables, relying on $* being plugin part of package name
plugin_name = $(call pkg_name_to_plugin_name,$*)
plugin_kind_jvm = $(patsubst jvm-%,%,$(filter jvm-%,$*))
plugin_kind_jwsgi = $(patsubst jwsgi-%,%,$(filter jwsgi-%,$*))
plugin_kind_lua = $(filter lua%,$*)
plugin_kind_rack = $(patsubst rack-%,%,$(filter rack-%,$*))
plugin_stem = $(or $(plugin_kind_jvm:%=jvm),$(plugin_kind_jwsgi:%=jwsgi),$(plugin_kind_lua:%=lua),$(plugin_kind_rack:%=rack))
plugin_basename = $(or $(plugin_stem),$(plugin_name))
plugin_kind = $(plugin_kind_$(plugin_stem))
plugin_lang = $(or \
	$(if $(filter jvm jwsgi,$(plugin_kind)),JAVA),\
	$(plugin_kind_lua:%=LUA),$(plugin_kind_rack:%=RUBY),\
	)
plugin_lang_stem = $(if $(filter JAVA,$(plugin_lang)),$(firstword $(subst -, ,$(plugin_kind))))
plugin_lang_kind = $(if $(filter JAVA,$(plugin_lang)),$(lastword $(subst -, ,$(plugin_kind))))
plugin_lang_home = $(if $(filter JAVA,$(plugin_lang)),/usr/lib/jvm/java-$(plugin_lang_kind)-$(plugin_lang_stem)-$(DEB_HOST_ARCH))
plugin_interpreter = $(if $(filter RUBY,$(plugin_lang)),/usr/bin/$(plugin_kind))
plugin_priority = $(if $(filter $(plugin_kind),$(UWSGI_$(plugin_lang)_DEFAULT_KIND)),75,35)
apachemodule_name = $(subst -,_,$(subst ruwsgi,Ruwsgi,$*))
apachemodule_apachename = $(subst -,_,$(subst ruwsgi,uwsgi,$*))

# per-infile variables, relying on $(infile) and optional $(plugin_stem)
# plugin_infile picks first existing infile variant:
# * basename + UWSGI_PKGSCRIPTS_$(plugin_stem) suffix
# * basename + UWSGI_PKGSCRIPTS_DEFAULT suffix
# * basename
plugin_infile = $(firstword $(wildcard $(patsubst %,$(infile).%,$(UWSGI_PKGSCRIPTS_$(or $(plugin_stem),DEFAULT))) $(infile)))

# CDBS-specific variables
# =======================

DEB_COMPRESS_EXCLUDE_uwsgi-core = .ini .lua .pl .png .psgi .py .ru .ws .xml \
                                  .yml
DEB_COMPRESS_EXCLUDE_uwsgi-extra = .class .java .rb .c

DEB_DH_STRIP_ARGS_uwsgi-core := --dbg-package=uwsgi-dbg
$(foreach PLUGIN_PKG_NAME, $(UWSGI_PLUGINS), $(eval \
	DEB_DH_STRIP_ARGS_uwsgi-plugin-$(PLUGIN_PKG_NAME) := --dbg-package=uwsgi-dbg\
))

DEB_INSTALL_DOCS_ALL += $(DEB_SRCDIR)/CONTRIBUTORS

DEB_DH_INSTALL_ARGS_uwsgi-plugin-psgi = coroae_plugin.so usr/lib/uwsgi/plugins
DEB_DH_INSTALL_ARGS_python-uwsgidecorators = uwsgidecorators.py $(python_installdir)
DEB_DH_INSTALL_ARGS_python3-uwsgidecorators = 2to3/uwsgidecorators.py $(python_installdir)

DEB_DH_SHLIBDEPS_ARGS_uwsgi-plugin-php = -l/usr/lib/php5 -- --ignore-missing-info

CDBS_DEPENDS_uwsgi-plugin-php = phpapi-$(PHP_API)
CDBS_DEPENDS_uwsgi-plugin-php +=, $(if $(PHP_SONAME_ALWAYS_CHANGE),\
	libphp5-embed (= $(PHP_VERSION)),\
	libphp5-embed (>= $(PHP_VERSION)~))

CDBS_DEPENDS_libapache2-mod-proxy-uwsgi = $(APACHE2_API:%=apache2-api-%)
CDBS_DEPENDS_libapache2-mod-uwsgi = $(APACHE2_API:%=apache2-api-%)
CDBS_DEPENDS_libapache2-mod-ruwsgi = $(APACHE2_API:%=apache2-api-%)
CDBS_RECOMMENDS_libapache2-mod-proxy-uwsgi = uwsgi-core
CDBS_RECOMMENDS_libapache2-mod-uwsgi = uwsgi-core
CDBS_RECOMMENDS_libapache2-mod-ruwsgi = uwsgi-core
CDBS_SUGGESTS_libapache2-mod-proxy-uwsgi = uwsgi
CDBS_SUGGESTS_libapache2-mod-uwsgi = uwsgi
CDBS_SUGGESTS_libapache2-mod-ruwsgi = uwsgi

# Rules
# =====

clean::
	# intermediate compiled files
	find . \
		\! -path './debian/*' \( -name '*.o' -o -name '*.pyc' \) -type f \
		-delete
	find . \
		\! -path './debian/*' -name __pycache__ -type d \
		-delete
	rm -f *_plugin.so
	# instantiated uwsgi-plugin-X templates
	rm -f $(call files_instantiated_in_debian_dir, \
		uwsgi-plugin-, $(UWSGI_PLUGINS), \
		.install \
	)
	for TEMPLATE_TYPE in links manpages postinst prerm; do \
		for INSTANTIATED_TEMPLATE in $(call files_instantiated_in_debian_dir, \
			uwsgi-plugin-, \
			$(UWSGI_PLUGINS_REGULAR_BUILD), \
			.$${TEMPLATE_TYPE} \
		); do \
			rm -f $${INSTANTIATED_TEMPLATE}; \
		done; \
	done
	rm -f debian/*.1
	rm -f debian/stamp-*
	rm -f uwsgibuild.*

# add per-package hook to expand packaging files before build
DEB_PHONY_RULES += $(patsubst %,expand-files/%,$(DEB_ALL_PACKAGES))
pre-build:: $(patsubst %,expand-files/%,$(DEB_ALL_PACKAGES))
$(patsubst %,expand-files/%,$(DEB_ALL_PACKAGES)) :: expand-files/% : | update-config debian/stamp-copyright-check

# uwsgi-core package
# ------------------

build/uwsgi-core:: uwsgi-core

# TODO: resolve list more generically (to avoid e.g. ZeroMQ exception)
uwsgi-core: debian/buildconf/uwsgi-plugin.ini uwsgi-core-local
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--build $(CURDIR)/debian/buildconf/uwsgi-core.ini
	
	set -e; for PLUGIN_NAME in \
			admin \
			alarm_speech \
			cache \
			carbon \
			cgi \
			cheaper_backlog2 \
			cheaper_busyness \
			clock_monotonic \
			clock_realtime \
			corerouter \
			coroae \
			echo \
			emperor_amqp \
			$(if $(filter-out hurd-%,$(DEB_HOST_ARCH)),emperor_zeromq) \
			fastrouter \
			http \
			logfile \
			logfile \
			logsocket \
			nagios \
			notfound \
			pam \
			ping \
			rawrouter \
			redislog \
			router_basicauth \
			router_cache \
			router_http \
			router_memcached \
			router_redirect \
			router_rewrite \
			router_static \
			router_uwsgi \
			rpc \
			rrdtool \
			rsyslog \
			signal \
			spooler \
			ssi \
			sslrouter \
			stats_pusher_statsd \
			symcall \
			syslog \
			transformation_gzip \
			transformation_tofile \
			transformation_toupper \
			ugreen \
			zergpool \
			; do \
		$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$${PLUGIN_NAME} \
				     $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
				     $${PLUGIN_NAME}; \
	done
clean::
	rm -f uwsgi-core
	find -type l -name 'uwsgi_*' -delete

DEB_INSTALL_DOCS_uwsgi-core += tests

# move installed examples into subdirs by type
ex_types = conffile psgi rack router wsapi wsgi
ex_conffile = mega.xml multi.* sites.xml uwsgi.xml vassals werkzeug_strict.yml werkzeug.*
ex_rack = config.ru config2.ru fibers.*
ex_router = router.lua uwsgirouter*
ex_psgi = mojoapp.pl
ex_wsapi = *.ws
ex_wsgi = mjpeg_stream.py multiapp.py simple_app.py simple_app_wsgi2.py taskqueue.py
ex_drop = bootstrap* config*.lua config??.ru corostream.pl debug.ini
ex_drop += flaskpost.py heavytest.* info_uwsgi.php logic.ini
ex_drop += protected.ini welcome.ini welcome3.py
binary-post-install/uwsgi-core::
	set -e; \
	cd debian/$(cdbs_curpkg)/usr/share/doc/$(cdbs_curpkg)/examples; \
	$(foreach type, $(ex_types),mkdir $(type); mv -t $(type) $(ex_$(type));) \
	rm $(ex_drop)

install/uwsgi-core::
	help2man \
		--name 'fast (pure C), self-healing, developer-friendly WSGI server' \
		--section 1 \
		--no-info \
		$(CURDIR)/uwsgi-core \
		> $(CURDIR)/debian/uwsgi-core.1

# uwsgi-plugin-% packages
# -----------------------

# setup hook and config for building plugins
$(patsubst %,build/uwsgi-plugin-%,$(UWSGI_PLUGINS)) \
	:: build/uwsgi-plugin-% \
	:  debian/buildconf/uwsgi-plugin.ini uwsgi-core-local \
	   debian/stamp-plugin-%

debian/buildconf/uwsgi-plugin.ini:
	sed -e 's|@@curdir@@|$(CURDIR)|g' \
		< $(CURDIR)/debian/buildconf/uwsgi-plugin.ini.in \
		> $(CURDIR)/debian/buildconf/uwsgi-plugin.ini
clean::
	rm -f debian/buildconf/uwsgi-plugin.ini

uwsgi-core-local:
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--build $(CURDIR)/debian/buildconf/uwsgi-plugin.ini
clean::
	rm -f uwsgi-core-local

$(patsubst %,debian/stamp-plugin-%,$(UWSGI_PLUGINS_REGULAR_BUILD)): debian/stamp-plugin-%:
	$(if $(filter JAVA,$(plugin_lang)),UWSGICONFIG_JVM_INCPATH='$(plugin_lang_home)/include/') \
	$(if $(filter JAVA,$(plugin_lang)),UWSGICONFIG_JVM_LIBPATH='$(JVM_SERVER_DIR)') \
	$(if $(filter LUA,$(plugin_lang)),UWSGICONFIG_LUA_IMPLEMENTATION=$(plugin_kind)) \
	$(if $(filter RUBY,$(plugin_lang)),UWSGICONFIG_RUBYPATH=$(plugin_interpreter)) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_basename) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

$(patsubst %,debian/stamp-plugin-pyerl-%,$(UWSGI_PYTHON_KINDS)):
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $(cdbs_python$(PYTHON_KIND:python%=%)_supported_versions))
	$(foreach python_version,$(PYVERS), \
		$(call cdbs_python_binary,python$(python_version)) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/pyerl \
			         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
			         pyerl_python$(subst .,,$(python_version)); \
	)
	sed -e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-pyerl.dirs.in \
			> $(CURDIR)/debian/uwsgi-plugin-pyerl-$(PYTHON_KIND).dirs
	touch $@

$(patsubst %,debian/stamp-plugin-%,$(UWSGI_PLUGINS_PYTHON)):
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $(cdbs_python$(PYTHON_KIND:python%=%)_supported_versions))
	$(foreach python_version,$(PYVERS), \
		$(call cdbs_python_binary,python$(python_version)) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/python \
			         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini\
			         python$(subst .,,$(python_version)); \
	)
	sed -e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-python.dirs.in \
			> $(CURDIR)/debian/uwsgi-plugin-$(PYTHON_KIND).dirs
	touch $@

debian/stamp-plugin-greenlet-python:
	$(foreach python_version,$(cdbs_python_supported_versions), \
		$(call cdbs_python_binary,python$(python_version)) $(UWSGI_BUILDER) \
			--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/greenlet \
			         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
			         greenlet_python$(subst .,,$(python_version)); \
	)
	touch $@

debian/stamp-plugin-rbthreads: debian/stamp-plugin-%:
	UWSGICONFIG_RUBYPATH=/usr/bin/$(UWSGI_RUBY_DEFAULT_KIND) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_name) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

debian/stamp-plugin-fiber: debian/stamp-plugin-%:
	UWSGICONFIG_RUBYPATH=/usr/bin/$(UWSGI_RUBY_DEFAULT_KIND) \
	$(cdbs_curpythonindepbinary) $(UWSGI_BUILDER) \
		--plugin $(CURDIR)/$(UWSGI_PLUGINS_SRC_DIR)/$(plugin_name) \
		         $(CURDIR)/debian/buildconf/uwsgi-plugin.ini \
		         $(plugin_name)
	touch $@

# resolve packaging scripts and man pages
# ---------------------------------------

infiles_plugin := $(wildcard debian/*__PLUGIN__*.in)
$(patsubst %,expand-files/uwsgi-plugin-%,$(UWSGI_PLUGINS_REGULAR_BUILD)):: expand-files/uwsgi-plugin-%:
	$(foreach infile,$(infiles_plugin),$(if $(shell test -s "$(plugin_infile)" && echo "not empty"),sed \
		-e 's/@@pkg_stem@@/$*/g' \
		-e 's/@@plugin_name@@/$(plugin_name)/g' \
		-e 's/@@plugin_alternatives_priority@@/$(plugin_priority)/g' \
		-e 's/@@plugin_stem@@/$(plugin_stem)/g' \
		-e 's/@@plugin_kind@@/$(plugin_kind)/g' \
		< $(plugin_infile) \
		> $(subst __PLUGIN__,$*,$(basename $(infile))); ))

$(patsubst %,install/uwsgi-plugin-%,$(UWSGI_PLUGINS_REGULAR_BUILD)):: install/uwsgi-plugin-%:
	ln -sf $(CURDIR)/uwsgi-core-local $(CURDIR)/uwsgi_$(plugin_name)
	help2man \
		--name 'fast (pure C), self-healing, developer-friendly WSGI server' \
		--section 1 \
		--no-info \
		$(CURDIR)/uwsgi_$(plugin_name) \
		> $(CURDIR)/debian/uwsgi_$(plugin_name).1

$(patsubst %,install/uwsgi-plugin-pyerl-%,$(UWSGI_PYTHON_KINDS))::
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYDEFAULT = $($(subst python,PYTHON,$(PYTHON_KIND))_DEFAULT))
	for TEMPLATE_TYPE in postinst prerm; do \
		sed \
			-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
			-e 's/@@default_python_version_dotless@@/$(PYDEFAULT)/g' \
			-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
				< $(CURDIR)/debian/uwsgi-plugin-pyerl.$${TEMPLATE_TYPE}.in \
				> $(CURDIR)/debian/$(cdbs_curpkg).$${TEMPLATE_TYPE}; \
	done
	for PYTHON_VERSION in $(PYVERS); do \
		sed -e "s/@@plugin_name@@/pyerl_python$${PYTHON_VERSION}/g" \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			>> $(CURDIR)/debian/$(cdbs_curpkg).install; \
	done
clean::
	for TEMPLATE_TYPE in dirs links manpages postinst prerm; do \
		rm -f $(call files_instantiated_in_debian_dir, \
			uwsgi-plugin-pyerl-, \
			$(UWSGI_PYTHON_KINDS), .$${TEMPLATE_TYPE} \
		); \
	done

$(patsubst %,install/uwsgi-plugin-%,$(UWSGI_PLUGINS_PYTHON))::
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYDEFAULT = $($(subst python,PYTHON,$(PYTHON_KIND))_DEFAULT))
	for TEMPLATE_TYPE in postinst prerm; do \
		sed \
			-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
			-e 's/@@default_python_version_dotless@@/$(PYDEFAULT)/g' \
			-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
				< $(CURDIR)/debian/uwsgi-plugin-python.$${TEMPLATE_TYPE}.in \
				> $(CURDIR)/debian/$(cdbs_curpkg).$${TEMPLATE_TYPE}; \
	done
	for PYTHON_VERSION in $(PYVERS); do \
		for TEMPLATE_TYPE in install links manpages; do \
			sed -e "s/@@plugin_name@@/python$${PYTHON_VERSION}/g" \
				< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.$${TEMPLATE_TYPE}.in \
				>> $(CURDIR)/debian/$(cdbs_curpkg).$${TEMPLATE_TYPE}; \
		done; \
		ln -sf \
			$(CURDIR)/uwsgi-core-local \
			$(CURDIR)/uwsgi_python$${PYTHON_VERSION}; \
		help2man \
			--name 'fast (pure C), self-healing, developer-friendly WSGI server' \
			--section 1 \
			--no-info \
			$(CURDIR)/uwsgi_python$${PYTHON_VERSION} \
			> $(CURDIR)/debian/uwsgi_python$${PYTHON_VERSION}.1; \
	done
clean::
	for TEMPLATE_TYPE in dirs links manpages postinst prerm; do \
		rm -f $(call files_instantiated_in_debian_dir, \
			uwsgi-plugin-, $(UWSGI_PYTHON_KINDS), .$${TEMPLATE_TYPE} \
		); \
	done

install/uwsgi-plugin-greenlet-python::
	for TEMPLATE_TYPE in postinst prerm; do \
		sed \
			-e 's/@@available_python_versions_dotless@@/$(PYTHON_VERS)/g' \
			-e 's/@@default_python_version_dotless@@/$(PYTHON_DEFAULT)/g' \
				< $(CURDIR)/debian/uwsgi-plugin-greenlet-python.$${TEMPLATE_TYPE}.in \
				> $(CURDIR)/debian/$(cdbs_curpkg).$${TEMPLATE_TYPE}; \
	done
	for PYTHON_VERSION in $(PYTHON_VERS); do \
		sed -e "s/@@plugin_name@@/greenlet_python$${PYTHON_VERSION}/g" \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			>> $(CURDIR)/debian/$(cdbs_curpkg).install; \
	done
clean::
	for TEMPLATE_TYPE in postinst prerm; do \
		rm -f $(call files_instantiated_in_debian_dir, \
			uwsgi-plugin-greenlet-, \
			$(UWSGI_PYTHON_KINDS), .$${TEMPLATE_TYPE} \
		); \
	done

install/uwsgi-plugin-rbthreads:: install/uwsgi-plugin-%:
	sed \
		-e 's/@@plugin_name@@/$(plugin_name)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			> $(CURDIR)/debian/$(cdbs_curpkg).install

install/uwsgi-plugin-fiber:: install/uwsgi-plugin-%:
	sed \
		-e 's/@@plugin_name@@/$(plugin_name)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-__PLUGIN__.install.in \
			> $(CURDIR)/debian/$(cdbs_curpkg).install

# resolve Python rtupdate scripts
# -------------------------------

$(patsubst %,binary-post-install/uwsgi-plugin-pyerl-%,$(UWSGI_PYTHON_KINDS))::
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYTHON_RTUPDATE_SCRIPT = \
		$(CURDIR)/debian/$(cdbs_curpkg)/usr/share/$(PYTHON_KIND)/runtime.d/uwsgi-plugin-pyerl-$(PYTHON_KIND).rtupdate \
	)
	sed \
		-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
		-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-pyerl.rtupdate.in \
			> $(PYTHON_RTUPDATE_SCRIPT)
	chmod 755 $(PYTHON_RTUPDATE_SCRIPT)

$(patsubst %,binary-post-install/uwsgi-plugin-%,$(UWSGI_PLUGINS_PYTHON))::
	$(eval PYTHON_KIND = $(call target_name_tail, $@))
	$(eval PYVERS = $($(subst python,PYTHON,$(PYTHON_KIND))_VERS))
	$(eval PYTHON_RTUPDATE_SCRIPT = \
		$(CURDIR)/debian/$(cdbs_curpkg)/usr/share/$(PYTHON_KIND)/runtime.d/uwsgi-plugin-$(PYTHON_KIND).rtupdate \
	)
	sed \
		-e 's/@@available_python_versions_dotless@@/$(PYVERS)/g' \
		-e 's/@@python_kind@@/$(PYTHON_KIND)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-python.rtupdate.in \
			> $(PYTHON_RTUPDATE_SCRIPT)
	chmod 755 $(PYTHON_RTUPDATE_SCRIPT)

binary-post-install/uwsgi-plugin-greenlet-python::
	$(eval PYTHON_RTUPDATE_SCRIPT = \
		$(CURDIR)/debian/$(cdbs_curpkg)/usr/share/python/runtime.d/uwsgi-plugin-greenlet-python.rtupdate \
	)
	sed \
		-e 's/@@available_python_versions_dotless@@/$(PYTHON_VERS)/g' \
			< $(CURDIR)/debian/uwsgi-plugin-greenlet-python.rtupdate.in \
			> $(PYTHON_RTUPDATE_SCRIPT)
	chmod 755 $(PYTHON_RTUPDATE_SCRIPT)

# libapache2-mod-% packages
# -------------------------

$(patsubst %,build/libapache2-mod-%,$(UWSGI_APACHEMODULES)):: build/% : debian/stamp-%
$(patsubst %,debian/stamp-libapache2-mod-%,$(UWSGI_APACHEMODULES)): debian/stamp-libapache2-mod-%:
	$(APXS2) -c \
		`$(APR_CONFIG) --link-ld` `$(APU_CONFIG) --link-ld` \
		$(CURDIR)/apache2/mod_$(apachemodule_name).c
	touch $@
clean::
	rm -rf apache2/.libs
	rm -f apache2/*.la apache2/*.lo apache2/*.slo

# resolve control files and apache2-specific module hint files
infiles_module := $(wildcard debian/*__MODULE__*.in)
$(patsubst %,expand-files/libapache2-mod-%,$(UWSGI_APACHEMODULES)):: expand-files/libapache2-mod-%:
	$(foreach infile,$(infiles_module),sed \
		-e 's/@@pkg_stem@@/$*/g' \
		-e 's/@@module_name@@/$(apachemodule_name)/g' \
		-e 's/@@apache_module_name@@/$(apachemodule_apachename)/g' \
		< $(infile) \
		> $(subst __MODULE__,$*,$(basename $(infile))); )
clean::
	rm -f $(foreach module,$(UWSGI_APACHEMODULES),$(subst __MODULE__,$(module),$(basename $(infiles_module))))

# Python module packages
# ----------------------

# convert Python 2.x module to Python 3
build/python3-uwsgidecorators:: 2to3/uwsgidecorators.py
2to3/uwsgidecorators.py:
	mkdir -p 2to3
	2to3 --output-dir=2to3 --write --nobackups --no-diffs \
		uwsgidecorators.py
clean::
	rm -rf 2to3
